--- EPICS-CPP-4.6.0/pvaPy/src/pvaccess/PyPvDataUtility.h	2016-09-18 10:22:36.000000000 -0700
+++ EPICS-CPP-4.6.0/pvaPy/src/pvaccess/PyPvDataUtility.h	2017-03-03 15:14:28.203997100 -0800
@@ -14,7 +14,7 @@
 #include "boost/python/tuple.hpp"
 
 #if defined HAVE_BOOST_NUM_PY && HAVE_BOOST_NUM_PY == 1
-#include "boost/numpy.hpp"
+#include "boost/python/numpy.hpp"
 #endif // if defined HAVE_BOOST_NUM_PY && HAVE_BOOST_NUM_PY == 1
 
 #include "PyUtility.h"
@@ -311,10 +311,10 @@
 //
 // Conversion PV Scalar Array => NumPy Array
 //
-boost::numpy::ndarray getScalarArrayFieldAsNumPyArray(const std::string& fieldName, const epics::pvData::PVStructurePtr& pvStructurePtr);
+boost::python::numpy::ndarray getScalarArrayFieldAsNumPyArray(const std::string& fieldName, const epics::pvData::PVStructurePtr& pvStructurePtr);
 
 template<typename PvArrayType, typename CppType>
-boost::numpy::ndarray getScalarArrayAsNumPyArray(const epics::pvData::PVScalarArrayPtr& pvScalarArrayPtr);
+boost::python::numpy::ndarray getScalarArrayAsNumPyArray(const epics::pvData::PVScalarArrayPtr& pvScalarArrayPtr);
 
 #endif // if defined HAVE_BOOST_NUM_PY && HAVE_BOOST_NUM_PY == 1
 
@@ -366,17 +366,17 @@
 
 #if defined HAVE_BOOST_NUM_PY && HAVE_BOOST_NUM_PY == 1
 template<typename PvArrayType, typename CppType>
-boost::numpy::ndarray getScalarArrayAsNumPyArray(const epics::pvData::PVScalarArrayPtr& pvScalarArrayPtr)
+boost::python::numpy::ndarray getScalarArrayAsNumPyArray(const epics::pvData::PVScalarArrayPtr& pvScalarArrayPtr)
 {
     int nDataElements = pvScalarArrayPtr->getLength();
     typename PvArrayType::const_svector data;
     pvScalarArrayPtr->PVScalarArray::template getAs<CppType>(data);
     const CppType* arrayData = data.data();
-    boost::numpy::dtype dataType = boost::numpy::dtype::get_builtin<CppType>();
+    boost::python::numpy::dtype dataType = boost::python::numpy::dtype::get_builtin<CppType>();
     boost::python::tuple shape = boost::python::make_tuple(nDataElements);
     boost::python::object arrayOwner;
     boost::python::tuple stride = boost::python::make_tuple(sizeof(CppType));
-    return boost::numpy::from_data(arrayData, dataType, shape, stride, arrayOwner);
+    return boost::python::numpy::from_data(arrayData, dataType, shape, stride, arrayOwner);
 }
 
 #endif // if defined HAVE_BOOST_NUM_PY && HAVE_BOOST_NUM_PY == 1
