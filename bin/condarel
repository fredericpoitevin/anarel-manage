#!/bin/env python

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import sys
import subprocess as sb
import xml.etree.ElementTree as ET

import os
import subprocess as sb
import argparse
import platform
import math
import re

ERRMSG = '''ERROR: the python package anarelinfo is not available to import.
anarelinfo comes from the psana-conda package. You must be in a conda environment
which has it installed. At LCLS, run conda_setup to activate the latest such
conda environment.
'''

try:
    import anarelinfo
except ImportError:
    print("%s" % ERRMSG)
    sys.exit(1)


######## globals ######
SIT_RELEASE_FNAME = '.sit_release'
SIT_CONDA_ENV_FNAME = '.sit_conda_env'
VERBOSE=False
QUIET=False
PCDS_EXTPKGS=['pdsdata','psalg']
CONDA_SETUP_ACTIVE_EVAR='_CONDA_SETUP_ACTIVE'
CONDA_SETUP_ACTIVE_VALUE='1'

######## logging #############

def info(msg):
    global QUIET
    if QUIET: return
    print(msg)
    sys.stdout.flush()

def vprint(msg):
    global VERBOSE
    global QUIET
    if QUIET: return    
    if not VERBOSE: return
    print(msg)
    sys.stdout.flush()

def warning(msg):
    sys.stderr.write("WARNING: %s\n" % msg)
    sys.stderr.flush()
    
def fatal(msg):
    sys.stderr.write("FATAL: %s\n" % msg)
    sys.stderr.flush()
    sys.exit(1)


##### ARGUMENTS #############

pcds_pkgs = ','.join(PCDS_EXTPKGS)

DESCR = '''manage development of psana-conda package. Typical cycle:

1. condarel --newrel --name myrel   # creates new release based on current conda environment.
2. condarel --addpkg --name pkgname [--tag HEAD] [--user]
   if pkgname is part of psana-conda, checks out the tag used to build psana-conda. All packages
   are cloned from github, except %s which come from an afs hosted svn at SLAC.
   --tag allows one to checkout a specific tag or branch. Use --tag HEAD to get
   latest in trunk. If package is already checked out, just does the git checkout, not the clone.

   If the package is SConsTools, links the SConstruct. If the package is one of %s, creates
   an 'extpkgs' subdir and checks out the package there.

3. condarel --chenv
   change the conda environment that this release is built against. (like sit_setup relupgrade)
''' % (pcds_pkgs, pcds_pkgs)

parser = argparse.ArgumentParser(description=DESCR,
                                 formatter_class=argparse.RawDescriptionHelpFormatter)

PSANA_GITHUB='lcls-psana'
SVN_USER='https://pswww.slac.stanford.edu/svn/userrepo'
SVN_PCDS='file:///afs/slac/g/pcds/svn'
SIT_RELDIR='/reg/g/psdm/sw/releases'

parser.add_argument('--name', type=str, help="name of new release, or package to add/create.", default=None)
parser.add_argument('--psana_github', type=str, help="organization on github where psana repositories are. default=%s" % PSANA_GITHUB, default=PSANA_GITHUB)
parser.add_argument('--svn_user_ana', type=str, help="ana user SVN repo, default=%s" % SVN_USER, default=SVN_USER)
parser.add_argument('--svn_pcds', type=str, help="SVN for pcds packages, default=%s" % SVN_PCDS, default=SVN_PCDS)
parser.add_argument('--verbose', action='store_true', help='verbose')
parser.add_argument('--https', action='store_true', help='use https for github and addpkg (defaults to ssh keys)')
parser.add_argument('--newrel', action='store_true', help='create new release')
parser.add_argument('--sconslnk', action='store_true', help='link SConstruct (usually done automatically)')
parser.add_argument('--addpkg', action='store_true', help='add package that is part of psana-conda, or otherwise')
parser.add_argument('--newpkg', action='store_true', help='create a new package. Uses --name')
parser.add_argument('--chenv', action='store_true', help='change conda environment that release is built against to current, use source activate to activate a conda environment first.')
parser.add_argument('--relinfo', action='store_true', help='release info, compare checked out tags to psana-conda tags')
parser.add_argument('--tag', type=str, help="specify tag, otherwise get release tag for psana packages, master/HEAD for general", default=None)
parser.add_argument('--user', action='store_true', help='used with addpkg, get package from user repo')
parser.add_argument('--convert2rpm', action='store_true', help="converts conda release to rpm. Use --name to specify ana release")
parser.add_argument('--convert2conda', action='store_true', help="converts a rpm release to a conda release. Uses currently active conda environment.")
parser.add_argument('--sit_reldir', type=str, help="rpm sit release directory, for convert2rpm command, defaults to %s" % SIT_RELDIR, default=SIT_RELDIR)

##### UTIL ############
def run_command(cmdList, shell):
    vprint("run_command: %s" % ' '.join(cmdList))
    p = sb.Popen(cmdList, shell=shell, stdout=sb.PIPE, stderr=sb.PIPE)
    stdout, stderr = p.communicate()
    if isinstance(stdout, bytes):
        # py3/py2 compatibility:
        stdout = stdout.decode('utf-8')
        stderr = stderr.decode('utf-8')
    return stdout, stderr.strip()

def get_site_packages_path(args):
    if not 'CONDA_PREFIX' in os.environ: fatal("CONDA_PREFIX not set. source a conda environment")
    conda_prefix = os.environ['CONDA_PREFIX']
    pydir = os.path.join(conda_prefix, 'lib', 'python2.7')
    if not os.path.exists(pydir):
        pydir = os.path.join(conda_prefix, 'lib', 'python3.5')
    if not os.path.exists(pydir): fatal("couldn't find either python2.7 or python3.5 in %s/lib" % conda_prefix)
    site_packages = os.path.join(pydir, 'site-packages')
    if not os.path.exists(site_packages): fatal("dir doesn't exist: %s" % site_packages)
    return site_packages

def link_sconstruct(site_packages):
    '''if SConstruct doesn't exist, links 
    SConstruct to SConsTools/src/SConstruct.main if it exists, and if not, to
    site_packages/SConsTools/src/SConstruct.main, it it exists
    '''
    def make_link(site_packages_sconstruct, local_sconstruct):
        assert not os.path.exists('SConstruct'), "internal error: make_link should not be called if SConstruct exists"
        link_source = None
        if os.path.exists(local_sconstruct):
            print("linking SConstruct to locally checked out file: %s" % local_sconstruct)
            link_source = local_sconstruct
        elif os.path.exists(site_packages_sconstruct):
            print("linking SConstruct to site packages file: %s" % site_packages_sconstruct)
            link_source = site_packages_sconstruct
        if link_source:
            os.symlink(link_source, 'SConstruct')
        else:
            warning("unexpected: did not link SConstruct, found neither site_packages nor local SConstruct.main")

    ########
    site_packages_sconstruct = os.path.join(site_packages, 'SConsTools', 'SConstruct.main')
    local_sconstruct = os.path.join('SConsTools', 'src', 'SConstruct.main')

    if not os.path.exists('SConstruct'):
        return make_link(site_packages_sconstruct, local_sconstruct)

    if not os.path.islink('SConstruct'):
        if os.path.exists(local_sconstruct):
            warning("SConstruct exists that is NOT a link.\n*NO* link make to: %s\nConsider removing your SConstruct and rerunning command." %  local_sconstruct)
        elif os.path.exists(site_packages_sconstruct):
            warning("SConstruct exists that is NOT a link.\n*NO* link make to site packages SConstruct.main\nConsider removing your SConstruct and rerunning command.")
        return

    link_source = os.readlink('SConstruct')
    if link_source == local_sconstruct:
        vprint("SConstruct link to %s already exists, not updating" % local_sconstruct)
        return
    elif link_source == site_packages_sconstruct:
        if os.path.exists(local_sconstruct):
            info("removing current SConstruct as it is a link to site_packages")
            os.unlink('SConstruct')
            return make_link(site_packages_sconstruct, local_sconstruct)
        vprint("not updating SConstruct, link to site_packages, and no local version avail to link to")
        return
    warning("SConstruct is a link pointing to %s, something other than local SConstruct.main or version in site_packages.\n*NO* new link made. Consider removing and rerunning command." % link_source)

def _writeSitRelease():
    global SIT_RELEASE_FNAME
    fout = open(SIT_RELEASE_FNAME,'w')
    fout.write("%s\n" % anarelinfo.version)
    fout.close()
    vprint("wrote file %s with contents %s" % (SIT_RELEASE_FNAME, anarelinfo.version,))

def _writeSitCondaEnv(conda_prefix):
    global SIT_CONDA_ENV_FNAME
    fout = open(SIT_CONDA_ENV_FNAME,'w')
    fout.write("%s\n" % conda_prefix)
    fout.close()
    vprint("wrote file %s with contents %s" % (SIT_CONDA_ENV_FNAME, conda_prefix,))

######### NEWREL ###################################
def makeNewRel(args):
    ####### helpers
    def makeAndCDintoRelDirectory(name):
        if os.path.exists(name):fatal("directory %s already exists" % name)
        if 0 != os.system('mkdir %s' % name): fatal("system call: mkdir %s failed." % name)
        vprint("mkdir %s completed" % name)
        os.chdir(name)
        vprint("in dir %s" % name)
        
    def makeSitReleaseFile():
        global SIT_RELEASE_FNAME
        if os.path.exists(SIT_RELEASE_FNAME): fatal("file %s exists." % SIT_RELEASE_FNAME)
        _writeSitRelease()
 
    def makeSitCondaFile():
        sit_conda_fname = '.sit_conda_env'
        conda_prefix=os.environ['CONDA_PREFIX']
        if 0==len(conda_prefix): fatal("CONDA_PREFIX not set")
        if os.path.exists(sit_conda_fname): fatal("file %s already exists" % sit_conda_fname)
        _writeSitCondaEnv(conda_prefix)
        return conda_prefix

    ###############
    global CONDA_SETUP_ACTIVE_VALUE
    global CONDA_SETUP_ACTIVE_EVAR

    if not args.name: fatal("must speficy --name with --newrel")
    SP_DIR = get_site_packages_path(args)
    makeAndCDintoRelDirectory(args.name)
    link_sconstruct(SP_DIR)
    makeSitReleaseFile()
    conda_env = makeSitCondaFile()
    os.chdir('..')

    msg = "directory %s is a conda based release against env=%s\n" % (args.name, os.path.basename(conda_env))
    msg += "do the following to activate:\n"
    msg += "cd %s\n" % args.name    
    if os.environ.get(CONDA_SETUP_ACTIVE_EVAR,None)==CONDA_SETUP_ACTIVE_VALUE:
        msg += "undo_conda\n"
    msg += "source conda_setup"

########## ADDPKG ###############
def addPkg(args):    
    def svn_switch_or_checkout(in_localrel): 
        if in_localrel:
            return 'switch'
        return 'checkout'

    def get_svn_pkg_url(repo, pkg, tag):
        url = "%s/%s" % (repo, pkg)
        if tag is None or tag == 'HEAD':
            url += '/trunk'
        elif tag:
            url += '/tags/%s' % tag
        return url

    ##########
    if not args.name: fatal("must use --name to specify package name with --addpkg")
    global PCDS_EXTPKGS
    pkg = args.name
    pkgtags = anarelinfo.pkgtags
    anarel_tag = pkgtags.get(pkg, None)
    user_specified_tag = args.tag
    pcdsext = pkg in PCDS_EXTPKGS
    git_use_https = args.https
    in_user_repo = args.user

    tag = None
    if user_specified_tag:
        if user_specified_tag != 'HEAD':
            tag = user_specified_tag
    elif anarel_tag:
        tag = anarel_tag

    in_localrel = False
    if pcdsext and os.path.exists('extpkgs') and os.path.exists(os.path.join('extpkgs', pkg)):
        in_localrel = True
    if (not pcdsext) and os.path.exists(pkg):
        in_localrel =  True

    vcs = 'git'
    if in_user_repo or pcdsext:
        vcs = 'svn'

    if vcs == 'git': 
        assert not pcdsext, "haven't updated git commands to checkout into ext area for pcds packages"
    
    if not in_localrel and vcs == 'git':
        if git_use_https:
            cmd = 'git clone https://github.com/%s/%s.git %s' % (args.psana_github, pkg, pkg)
        else:
            cmd = 'git clone git@github.com:%s/%s.git %s' % (args.psana_github, pkg, pkg)

        info("addpkg: about to run  %s" % cmd)
        if 0 != os.system(cmd): fatal("addpkg: command failed: %s" % cmd)

    if vcs == 'git':
        os.chdir(pkg)
        cmd = 'git checkout %s'
        if tag and tag != 'HEAD':
            cmd %= tag
        else:
            cmd %= 'master'
        info("addpkg about to run  %s (from subdir %s)" % (cmd, pkg))
        if 0 != os.system(cmd): fatal("addpkg: command failed: %s" % cmd)
        os.chdir("..")
    else:
        cmd = 'svn %s' % svn_switch_or_checkout(in_localrel)
        cmd += ' %s' % get_svn_pkg_url(repo=repo, pkg=pkg, tag=tag)
        cmd += ' %s' % pkg
        
        if pcdsext:
            if not os.path.exists('extpkgs'):
                os.mkdir('extpkgs')
                if not os.path.exists('extpkgs'): fatal("addpkg: could not make directory extpkgs")
                info("addpkg: pkg=%s is a pcds external, created subdirectory extpkgs, will checkout into there" % pkg)
            os.chdir('extpkgs')

        info("addpkg: about to run: %s" % cmd)
        if 0 != os.system(cmd): fatal("addpkg: command failed: %s" % cmd)

        if pcdsext:
            os.chdir('..')
            # The user really needs the proxy package as well
            proxy_name = args.name + '_ext'
            if not os.path.exists(proxy_name):
                warning("You will also need to do --addpkg --name %s to build %s which has been checked out in extpkgs" % (proxy_name, args.name))

    if pkg == 'SConsTools':
        spdir = get_site_packages_path(args)
        link_sconstruct(spdir)

def newPkg(args):
    global SIT_RELEASE_FNAME
    global SIT_CONDA_ENV_FNAME
    pkg = args.name
    if not pkg: fatal("must use --name to specify package name")
    if not os.path.exists(SIT_RELEASE_FNAME) or not os.path.exists(SIT_CONDA_ENV_FNAME):
        fatal("newpkg should be run from a test release, this does not appear to be a test release")
    if os.path.exists(pkg):
        fatal("there is already a package named %s" % pkg)
    os.mkdir(pkg)
    info("made directory %s" % pkg)
    for subdir in ['doc','src','app','data']:
        subpath = os.path.join(pkg,subdir) 
        os.mkdir(subpath)
        info("made sub directory %s" % subpath)
    docsub = os.path.join(pkg,'doc')
    info("You can remove any subdirs you won't make use of")
    cmds=["codegen -o %s -l SConscript %s SConscript" % (pkg,pkg),
          "codegen -o %s -l README %s SConscript" % (docsub, pkg),
          "codegen -o %s -l ChangeLog %s ChangeLog" % (docsub, pkg)]
    for cmd in cmds:
        if 0 != os.system(cmd):
            warning("newpkg: command failed: %s" % cmd)
    

def changeEnv(args):
    if args.name: fatal("chenv does not use --name argument, activate conda environment you want to change to first, with source activate [envname]")
    conda_prefix = os.environ.get('CONDA_PREFIX',None)
    if not conda_prefix: fatal("--chenv: must be in a conda environment, but CONDA_PREFIX not defined")
    if not os.path.exists('.sit_conda_env'): fatal("--chenv: .sit_conda_env file not present, are you in the release directory, for a release built against a conda environment?")
    if not os.path.exists('.sit_release'): fatal("--chenv: .sit_release file not present, are you in the release directory, for a release built against a conda environment?")
    current_conda_prefix = open('.sit_conda_env','r').read().strip()
    current_sit_release = open('.sit_release','r').read().strip()
    new_sit_release = anarelinfo.version
    if new_sit_release == current_sit_release and conda_prefix == current_conda_prefix:
        warning("changeEnv: not doing anything. There is no change in conda environment or psana-conda version between the current conda environment and the release")
        return
    _writeSitRelease()
    _writeSitCondaEnv(conda_prefix)
    msg = "chenv: updated release information.\n"
    msg += "   conda_env: %s -> %s\n" % (os.path.basename(current_conda_prefix), os.path.basename(conda_prefix))
    msg += " sit_release: %s -> %s\n" % (current_sit_release, new_sit_release)
    msg += "\nNow run:\nsource conda_setup\n"
    msg += "to activate new release environment, and\n"
    msg += "scons -c\n"
    msg += "to clean environment. Check compatability of check out packages with --relinfo command.\n"
    msg += "Then rebuild against new conda env.\n"
    info(msg)


    
def get_version_control_info(path, args):
    cmd = 'svn info --xml %s' % path
    stdout, stderr = run_command([cmd], shell=True)
    if stderr:
        cdir=os.getcwd()
        os.chdir(path)
        stdout, stderr = run_command(['git status'], shell=True)
        os.chdir(cdir)
        if stderr:
            return None
        raise Exception("implement parsing git here")
    
    root=ET.fromstring(stdout)
    url = root.find('entry/url')
    if url is None:
        warning("cmd: %s couldn't get entry/url from xml" % cmd)
        return None
    url = url.text
    for name, repo_url in zip(['ana','pcds','user'],
                              [args.svn_ana, args.svn_pcds, args.svn_user_ana]):
        if url.startswith(repo_url):
            _, after = url.split(repo_url)
            fields = [fld for fld in after.split('/') if len(fld)>0]
            if fields[-1]=='trunk':
                return {'tag':'HEAD','repo':name, 'branch':False}
            if len(fields)>=2:
                if fields[-2] == 'tags':
                    return {'tag':fields[-1], 'repo':name, 'branch':False}
                elif fields[-2] == 'branches':
                    return {'tag':fields[-1], 'repo':name, 'branch':True}
    
    warning("cmd: %s got url=%s but couldn't parse trunk, tag or branch" % (cmd, url))
    return None

def convert2rpm(args):
    if not args.name: fatal("must use --name to specify rpm release to build against.")
    if not os.path.exists(args.sit_reldir): fatal("sit_reldir=%s does not exist" % args.sit_reldir)
    anarel = os.path.join(args.sit_reldir, args.name)
    if not os.path.exists(anarel): fatal("%s does not exist in the sit releases" % args.name)
    
    global SIT_RELEASE_FNAME
    global SIT_CONDA_ENV_FNAME

    if not os.path.exists(SIT_RELEASE_FNAME) or not os.path.exists(SIT_CONDA_ENV_FNAME):
        fatal("The currrent directory is not a conda release")

    if os.path.islink(anarel):
        relname = os.path.basename(os.readlink(anarel))
    else:
        relname = os.path.basename(anarel)

    rel_conda_env = file(SIT_CONDA_ENV_FNAME,'r').read().strip()
    os.unlink(SIT_CONDA_ENV_FNAME)
    info("Deleted file %s with content %s" % (SIT_CONDA_ENV_FNAME, rel_conda_env))

    old_sit_release = file(SIT_RELEASE_FNAME,'r').read().strip()    
    fout = file(SIT_RELEASE_FNAME,'w')
    fout.write(relname)
    fout.close()
    info("Overwrote file %s with %s\n  old contents: %s" % (SIT_RELEASE_FNAME, relname, old_sit_release))
    info("** This test release has been converted to a SIT RPM test release **")
    in_conda_set = int(os.environ.get('_CONDA_SETUP_ACTIVE','0'))
    if in_conda_set:
        info("** use the \nundo_conda\n function to remove conda from the environment.")
    else:
        info("** make sure conda is cleaned from the environment")
    for pkg in os.listdir('.'):
        sconscript = os.path.join(pkg,'SConscript')
        if os.path.exists(sconscript):
            if pkg in ['hdf5','numpy','boost','openmpi','pdsdata','psalg','python']:
                info("You have the package %s checked out, the conda version is not compatible with the rpm system" % pkg)
        if pkg == 'extpkgs':
            info("You have a extpkgs directory, that is not compatible with the rpm system")
    info("** note: any proxy packages for external packages may not function properly when switching")    
    info("** After cleaning conda from the environment, do\nsit_setup\nas usual to activate the test release, and do\nscons -c")
    info("** Finally do scons to rebuild against the rpm packages.")
        
def convert2conda(args):
    if args.name: fatal("don't use --name with --convert2conda, converts to currently active conda environ.")

    global SIT_RELEASE_FNAME
    global SIT_CONDA_ENV_FNAME

    if not os.path.exists(SIT_RELEASE_FNAME):
        fatal("This is not a rpm test release, there is no %s file" % SIT_RELEASE_FNAME)

    if os.path.exists(SIT_CONDA_ENV_FNAME):
        fatal("This is already a conda test release, there is a %s file" % SIT_CONDA_ENV_FNAME)

    old_rel = file(SIT_RELEASE_FNAME,'r').read().strip()

    newrel = anarelinfo.version
    condaenv = os.environ.get('CONDA_PREFIX',None)
    if not condaenv:
        fatal("unexpected, CONDA_PREFIX is not defined, can't identify conda environment.")

    fout = file(SIT_RELEASE_FNAME,'w')
    fout.write(newrel)
    fout.close()

    fout = file(SIT_CONDA_ENV_FNAME,'w')
    fout.write(condaenv)
    fout.close()
    
    info("Overwrote file %s with %s\n  old contents: %s" % (SIT_RELEASE_FNAME, newrel, old_rel))
    info("Wrote new file %s with contents %s" % (SIT_CONDA_ENV_FNAME, condaenv))
    
    info("** This test release has been converted to a conda test release **")
    info("** do\nsource conda_setup\n from this directory to activate.")
    info("** then do scons -c to clean. Note, any packages related to external packages, such as ")
    info("** hdf5 openmpi pdsdata numpy boost, etc")
    info("** will not function properly")
        
def relInfo(args):
    fatal("relInfo not implemented for git")
    cand_pkgs = os.listdir('.')
    pkgs = [pkg for pkg in cand_pkgs if os.path.exists(os.path.join(pkg, 'SConscript'))]
    if os.path.exists('extpkgs'):
        for sdir in os.listdir('extpkgs'):
            if sdir in ['build','install', 'arch']: continue
            pkgs.append(os.path.join('extpkgs', sdir))
    pkgs.sort()
    if len(pkgs)==0:
        print("No psana packages were found (subdirectories with a SConscript file)")
        print("exiting.")
        return

    vcinfos = [get_version_control_info(pkg, args) for pkg in pkgs]
    pkgWidth = max(len("package"), max([len(pkg) for pkg in pkgs]))
    tagWidth = max([len(vcinfo['tag']) for vcinfo in vcinfos if vcinfo])
    
    print(' %s | %s | %s | notes (repo/branch/diff)' % \
          ('package'.rjust(pkgWidth), 
           'tag'.ljust(tagWidth),
           'reltag'.ljust(tagWidth)))

    for pkg, vcinfo in zip(pkgs, vcinfos):
        ln = ' %s ' % pkg.rjust(pkgWidth)
        if vcinfo is None:
            ln += "  --"
        else:
            ln += '  %s ' % vcinfo['tag'].ljust(tagWidth)
            anarel_tag = anarelinfo.pkgtags.get(pkg, None)
            if anarel_tag == 'conda_branch':
                anarel_tag = 'conda'
            sign = ''
            if anarel_tag:
                ln += ' %s ' % anarel_tag.ljust(tagWidth)
                if vcinfo['tag'] != anarel_tag:
                    if vcinfo['tag'] == 'HEAD' or anarel_tag == 'HEAD':
                        sign = '?'
                    elif vcinfo['tag'] > anarel_tag:
                        sign = '+'
                    elif vcinfo['tag'] < anarel_tag:
                        sign = '-'
            else:
                ln += ' %s ' % '--'.ljust(tagWidth)
            if vcinfo['repo'] != 'ana':
                ln += ' repo=%s' % vcinfo['repo']
            if vcinfo['branch']:
                ln += 'branch=True'
            ln += ' %s' % sign
        print(ln)
    
if __name__ == '__main__':
    args = parser.parse_args()
    VERBOSE=args.verbose
    number_commands_given = int(args.sconslnk) + int(args.addpkg) + \
                            int(args.newrel) + int(args.chenv) + \
                            int(args.relinfo) + int(args.newpkg) + \
                            int(args.convert2conda) + int(args.convert2rpm)
    
    if number_commands_given != 1: fatal("must specify one, and only one, of "
                                         "--addpkg --newpkg --newrel --chenv "
                                         "--convert2conda --convert2rpm "
                                         "--relinfo --sconslnk (note two "
                                         "dashes --  not one - with flags)."
                                         " computed %d for number commands." % (number_commands_given,))
    if args.newrel:
        makeNewRel(args)
    elif args.addpkg:
        addPkg(args)
    elif args.newpkg:
        newPkg(args)
    elif args.chenv:
        changeEnv(args)
    elif args.relinfo:
        relInfo(args)
    elif args.sconslnk:
        spdir = get_site_packages_path(args)
        link_sconstruct(spdir)
    elif args.convert2rpm:
        convert2rpm(args)
    elif args.convert2conda:
        convert2conda(args)
