#!/usr/bin/env python

import os
import sys
import math
import re
import platform
import subprocess as sb
try:
    import argparse
except ImportError:
    bindir = os.path.split(os.path.abspath(__file__))[0]
    basedir = os.path.split(bindir)[0]
    for_old_python = os.path.join(basedir, 'pylib', 'for_old_python')
    sys.path.append(for_old_python)
    import argparse

PY3 = sys.version_info[0] == 3

######## logging #############
VERBOSE=False
QUIET=False
CONDA_SETUP_ACTIVE_EVAR='_CONDA_SETUP_ACTIVE'
CONDA_SETUP_ACTIVE_VALUE='1'

def info(msg):
    if QUIET:
        return
    sys.stdout.write("%s\n" % msg)
    sys.stdout.flush()

def vprint(msg):
    global VERBOSE
    global QUIET
    if VERBOSE and not QUIET:
        sys.stdout.write("%s\n" % msg)
        sys.stdout.flush()

def warning(msg):
    sys.stderr.write("WARNING: %s\n" % msg)
    sys.stderr.flush()
    
def fatal(msg):
    sys.stderr.write("FATAL: %s\n" % msg)
    sys.stderr.flush()
    sys.exit(1)

######### util ########################
def run_command(cmdList, shell):
    vprint("run_command: %s" % ' '.join(cmdList))
    p = sb.Popen(cmdList, shell=shell, stdout=sb.PIPE, stderr=sb.PIPE)
    stdout, stderr = p.communicate()
    if PY3 and isinstance(stdout, bytes):
        # py2/py3 compatibility
        stdout = stdout.decode('utf-8')
        stderr = stderr.decode('utf-8')
    return stdout, stderr.strip()

def conda_setup_is_active():
    global CONDA_SETUP_ACTIVE_EVAR
    global CONDA_SETUP_ACTIVE_VALUE
    return os.environ.get(CONDA_SETUP_ACTIVE_EVAR, None)==CONDA_SETUP_ACTIVE_VALUE

def set_conda_setup_active(newenv):
    newenv[CONDA_SETUP_ACTIVE_EVAR]=CONDA_SETUP_ACTIVE_VALUE

def write_env_file(args, oldenv, newenv):
    global QUIET
    fout = open(args.file, 'w')
    write_newenv(fout, newenv)
    if is_conda_test_release_dir(args) and args.prompt.lower() != 'none' :
        fout.write('''export PS1="%s $PS1"\n''' % args.prompt)
    write_undo_function(fout, oldenv, newenv)
    write_activate_condaenv(fout, args)
    if is_conda_test_release_dir(args):
        put_release_bin_in_front_of_conda(args, fout, newenv['SIT_ARCH'])
        # when the conda environment activates, it may overwrite somethings, put them back
        for evar in ['SIT_ARCH', 'SIT_DATA', 'SIT_ROOT']:
            if evar in newenv and newenv[evar] not in [None, '', 'None']:
                fout.write("export %s=%s\n" % (evar, newenv[evar]))
    if not QUIET:
        fout.write('echo "environment setup. Type: undo_conda  [return] at the prompt to undo."\n')

def write_newenv(fout, newenv):
    for evar, val in newenv.items():
        if val is None or val=='' or val == 'None':
            fout.write("unset %s\n" % evar)
        else:
            fout.write("export %s=%s\n" % (evar, val))
    fout.write('\n\n')

REHASH='''
  if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
        hash -r 2>/dev/null
  fi
'''

# this borrows from virtualenv activate script
def write_undo_function(fout, oldenv, newenv):
    fout.write("undo_conda() {\n")
    fout.write("  source deactivate\n")
    for evar in newenv:
        fout.write("  unset %s\n" % evar)
    for evar,val in oldenv.items():
        if val is None or val == '' or val == 'None':
            fout.write('  unset %s\n' % evar)
        else:
            fout.write('  export %s="%s"\n' % (evar,val))
    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    fout.write(REHASH)
    fout.write('  unset -f undo_conda\n')
    fout.write("}\n\n\n")

def write_activate_condaenv(fout, args):
    if args.noenv:
        return
    if None is args.env:
        if not os.path.exists(args.current):
            fatal("configuration directory with current information doesn't exist, it is: %s" % args.ana_current)
        swGroup = 'ana'
        fname = 'ana-current'
        if args.dm:
            swGroup = 'dm'
            fname = 'dm-current'
            if args.dev + args.gpu + args.py3 > 0:
                fatal("Cannot specify --dev --gpu or --py3 with --dm, there is presently only the py27 prod dm environment")

        swCurrent = os.path.join(args.current, swGroup)
        if not os.path.exists(swCurrent):
            fatal("%s directory %s doesn't exist" % (swGroup, swCurrent))

        if args.gpu + args.py3 > 1:
            fatal("cannot specify both --gpu and --py3")
        if args.gpu:
            fname += '-gpu'
        elif args.py3:
            fname += '-py3'

        path = os.path.join(swCurrent, fname)
        if not os.path.exists(path):
            fatal("The file %s doesn't exists, can't identify %s-current for given options (gpu=%s py3=%s)" %
                  (swGroup, path, args.gpu, args.py3))
        args.env=file(path,'r').read()

    activate_line = 'source activate %s' % args.env
    prod_or_dev = 'production'
    if args.dev:
        prod_or_dev = 'devel'
    if not QUIET:
        fout.write('echo "activating a %s conda environment with command %s"\n' % (prod_or_dev, activate_line))
    fout.write("%s\n\n\n" % activate_line)

def put_release_bin_in_front_of_conda(args, fout, sit_arch):
    test_release_root = get_abspath_test_release_root(args)
    relbin = os.path.join(test_release_root, 'arch', sit_arch, 'bin')
    fout.write("export PATH=%s:$PATH\n" % relbin)
    
########### undo sit_setup ###################
def is_sitsetup_arch_subdir(path, subdir_to_arch):
    '''return True if path ends with
    arch/x86*/subdir/* where subdir is 2nd argument, usually one of
    bin, lib or python. This should strip out things like
    arch/x86*/python/pyextra as well as arch/x86*/python
    '''
    directories = path.split(os.path.sep)
    while len(directories) and directories[-1] !=subdir_to_arch:
        directories.pop()
    if len(directories)<3: return False
    assert directories[-1] == subdir_to_arch, "unexpected programming error"
    if directories[-3] != 'arch': return False
    if not directories[-2].startswith('x86'):
        warning("is_sitsetup_arch_subdir - "
                "path=%s ends with %s, and has 'arch', but in "
                "between it is %s, which does not start with x86, "
                "unusual. Not cleaning from path" % (path, subdir_to_arch, directories[-2]))
        return False
    return True
    
def dedup(data):
    unique=[]
    seen=set()
    for el in data:
        if el not in seen:
            unique.append(el)
            seen.add(el)
    return unique

def get_evar_paths(evar):
    if evar not in os.environ:
        return []
    paths = os.environ[evar]
    if len(paths.strip())==0:
        return []
    paths = paths.split(os.path.pathsep)
    paths = dedup(paths)
    vprint("get_evar_paths evar=%s:%s" % (evar, paths))
    return paths

def clean_path_evars(sit_releases, sit_external, psdm_bin):
    '''Returns two dictionaries, oldenv, newenv.
    Records the current state of PYTHONPATH, PATH and LD_LIBRARY_PATH
    in oldenv. Records '' if the variable is not set.
    newenv has either '' for these variables, or a potential 
    reduced set of paths then what is currently set.
    The reduced set:
      strips duplicates, removes sit_releases path, and sit_external paths,
      and other directories associated with the rpm releases
    '''
    oldenv = {}
    newenv = {}
    for evar, arch_subdir, others_to_remove, expectempty in \
        zip(['PYTHONPATH', 'PATH', 'LD_LIBRARY_PATH'],
            ['python', 'bin', 'lib'],
            [[], [], ['/afs/slac/package/lsf/curr/lib']],
            [True, False, True]):
        vprint('cleaning evar=%s' % evar)
        oldenv[evar]=os.environ.get(evar,'')
        paths = get_evar_paths(evar)
        filtered = []
        for path in paths:
            if path.startswith(sit_releases):
                vprint("  %s: removing - starts with %s" % (path, sit_releases))
            elif path == psdm_bin:
                vprint("  %s: removing - equal to  %s" % (path, psdm_bin))
            elif path.startswith(sit_external):
                vprint("  %s: removing - starts with %s" % (path, sit_external))
            elif is_sitsetup_arch_subdir(path, arch_subdir):
                vprint("  %s: removing - looks like arch subdir=%s" % (path, arch_subdir))
            elif path in others_to_remove:
                vprint("  %s: removing - part of set of paths to remove for this envvar" % path)
            else:
                vprint("  %s: KEEPING" % path)
                filtered.append(path)
        
        paths = os.path.pathsep.join(filtered)
        if len(filtered)>0 and expectempty:
            warning('expected %s to be empty after undoing sit_setup. '
                    'However it is not, make sure compatible with '
                    'conda environment. it is %s' % (evar, paths))

        if len(filtered)==0:
            if evar in os.environ:
                newenv[evar]=''
        else:
            newenv[evar]=paths
    return oldenv, newenv

def save_other_env(oldenv):
    for evar in ['PS1']:
        if evar in os.environ:
            vprint("saving %s=%s" % (evar, os.environ[evar]))
            oldenv[evar]=os.environ[evar]

def undo_sit_setup():
    sit_root = os.environ.get('SIT_ROOT','/reg/g/psdm')
    psdm_bin = os.path.join(sit_root, 'bin')
    vprint("identified sit_root as: %s" % sit_root)
    sit_releases = os.path.join(sit_root, 'sw/releases')
    sit_external = os.path.join(sit_root, 'sw/external')
    oldenv, newenv = clean_path_evars(sit_releases, sit_external, psdm_bin)
    toremove = ['SIT_DATA', 'SIT_ARCH', 'SIT_ROOT', 
                'SIT_SVN', 'SIT_ENV', 'SIT_RELDIR',
                'SIT_REPOS', 'SIT_SVN_USER',
                'SIT_RELEASE', 'SIT_USE_CONDA']
    for evar in toremove:
        if evar in os.environ:
            oldenv[evar]=os.environ[evar]
            vprint("removing %s=%s" % (evar, os.environ[evar]))
            newenv[evar]=''    
    return oldenv, newenv

############ new conda vars #################    
def getOsAndPlatform():
    platform_string = platform.platform()
    if platform_string.startswith('Darwin'):
        return 'osx','osx'
    elif platform_string.startswith('Linux'):
        if '-redhat-' in platform_string:
            version_string = platform_string.split('-redhat-')[1].split('-')[0]
            major_version = int(math.floor(float(version_string)))
            archMachine = platform.machine()
            assert archMachine == 'x86_64', "unexpected - machine architechture is not x86_64"
            return 'rhel%d' % major_version, 'linux-64'
    raise Exception("could not determin Os/platform. Only looked for Darwin and redhat linux, but platform string is %s" % platform_string)

def get_SIT_ARCH(debug=False):
    '''return dictionary of all SIT variables needed for build
    '''
    osName, platStr = getOsAndPlatform()
    vprint("osName=%s" % osName)
    vprint("platform=%s" % platform)
    compiler = os.environ.get('CC','gcc')
    stdout, stderr = run_command(['which', compiler], shell=False)
    assert len(stderr.strip())==0, "no compiler found. Tried %s" % compiler
    vprint("compiler=%s" % compiler)
    stdout, stderr = run_command([compiler, '--version'], shell=False)
    assert len(stderr.strip())==0, "found compiler=%s, but command %s --version produced error:\n%s\nstdout=%s" % \
        (compiler, compiler, stderr, stdout)
    vprint("%s --version produced:\nstdout=%s\nstderr=%s" % (compiler, stdout, stderr))
    COMPILER_VERSION = re.compile('\s+(\d+\.\d+)\.\d+')
    lineOneOfVersionOutput = stdout.split('\n')[0]
    ccVerMatch = re.search(COMPILER_VERSION, lineOneOfVersionOutput)
    assert ccVerMatch, "could not identify a complier version from first line of %s --version which is: %s" % (compiler, lineOneOfVersionOutput)
    versionWithDot = ccVerMatch.groups()[0]
    versionWithoutDot = ''.join(versionWithDot.split('.'))
    archMachine = platform.machine()
    optOrDebug = {False:'opt', True:'dbg'}[debug]
    SIT_ARCH = '%s-%s-%s%s-%s' % (archMachine, osName, compiler, versionWithoutDot, optOrDebug)
    return SIT_ARCH

def get_conda_bin_for(args):
    if args.conda:
        if args.dev or args.rhel5 or args.rhel6:
            warning("--conda is set, ignoring options like --dev, --rhel6, etc")
        condadir = args.conda
        if not os.path.exists(condadir):
            fatal('explicit conda specified with --conda, but dir=%s does not exist' % condadir)
        condabin = os.path.join(condadir, 'bin')
        if not os.path.exists(condabin):
            fatal('conda bin=%s from --conda does not exist, use --conda to specify base dir for conda installation, it must have a bin subdir' % condabin)
        return condabin

    instdir = args.instdir
    if not os.path.exists(instdir): fatal("installation directory=%s doesn't exist, can be set through --instdir" % instdir)
    minicondadir = os.path.join(instdir, 'miniconda2')
    if args.rhel5 + args.rhel6 + args.rhel7 != 1:
        fatal("internal error - there is not one platform specified, args=%r" % args)
    if args.dev:
        minicondadir += '-dev'
    else:
        minicondadir += '-prod'
    if args.rhel7:
        minicondadir += '-rhel7'
    elif args.rhel6:
        minicondadir += '-rhel6'
    elif args.rhel5:
        minicondadir += '-rhel5'
    condabin = os.path.join(instdir, minicondadir, 'bin')
    if not os.path.exists(condabin):
        fatal("parsed args, got condabin=%s, but it doesn't exist" % (condabin,))
    return condabin

SIT_RELEASE_FNAME = '.sit_release'      # contains psana-conda package name, as anarelinfo reports, i.e psana-conda-n.n.n
SIT_CONDA_ENV_FNAME = '.sit_conda_env'  # contains full path to conda env

def get_test_release_files(args):
    global SIT_RELEASE_FNAME
    global SIT_CONDA_ENV_FNAME
    sit_release_fname = SIT_RELEASE_FNAME
    sit_conda_env_fname = SIT_CONDA_ENV_FNAME
    if args.reldir:
        if not os.path.exists(args.reldir): fatal("You have specified a path for a test release with the --reldir flag.\nHowever the path:\n%s\ndoesn't exist" % args.reldir)
        sit_release_fname = os.path.join(args.reldir, sit_release_fname)
        sit_conda_env_fname = os.path.join(args.reldir, sit_conda_env_fname)
        if not os.path.exists(sit_release_fname): fatal("You have specified a path to a test release with the --reldir, but the file:\n%s\ndoesn't exist" % sit_release_fname)
        if not os.path.exists(sit_conda_env_fname): fatal("You have specified a path to a test release with the --reldir, but the file:\n%s\ndoesn't exist" % sit_conda_env_fname)
        return sit_release_fname, sit_conda_env_fname
    if os.path.exists(sit_release_fname):
        if os.path.exists(sit_conda_env_fname):
            return sit_release_fname, sit_conda_env_fname
        elif args.verbose:
            warning("conda_setup appears to be running from a old rpm based test release. It is not being activated.")
    return None, None

def is_conda_test_release_dir(args):
    sit_release_fname, sit_conda_env_fname = get_test_release_files(args)
    return sit_release_fname and sit_conda_env_fname

def get_conda_prefix_for_test_release(args):
    sit_release_fname, sit_conda_env_fname = get_test_release_files(args)
    if sit_conda_env_fname is None: fatal("internal error: not a test release")
    conda_prefix = open(sit_conda_env_fname,'r').read().strip()
    return conda_prefix

def get_abspath_test_release_root(args):
    if args.reldir:
        rootdir = os.path.abspath(args.reldir)
    else:
        rootdir = os.path.abspath('.')
    if not os.path.exists(rootdir):
        fatal("test release root directory:\n%s\ndoesn't exist" % rootdir)
    return rootdir

def get_conda_bin_and_env_from_test_release(args):
    conda_prefix = get_conda_prefix_for_test_release(args)
    env_dir, conda_env = os.path.split(conda_prefix)
    conda_root, jnk = os.path.split(env_dir)
    conda_bin = os.path.join(conda_root, 'bin')
    if not os.path.exists(conda_bin): fatal("Unable to form conda root bin subdir from conda_prefix=%s, tried conda_bin=%s but it doesn't exist" % (conda_prefix, conda_bin))
    return conda_bin, conda_env

def update_newenv_for_test_release(args, newenv):
    test_release_root_dir = get_abspath_test_release_root(args)    
    sit_arch = get_SIT_ARCH(debug=False)

    # PATH has to be done after activating the conda environment
    
    paths = newenv.get('PYTHONPATH','').split(os.path.pathsep)
    paths.insert(0,os.path.join(test_release_root_dir, 'arch',sit_arch, 'python'))
    newenv['PYTHONPATH']=os.path.pathsep.join(paths)

    paths = newenv.get('LD_LIBRARY_PATH','').split(os.path.pathsep)
    paths.insert(0,os.path.join(test_release_root_dir, 'arch',sit_arch, 'lib'))
    newenv['LD_LIBRARY_PATH']=os.path.pathsep.join(paths)

    conda_prefix = get_conda_prefix_for_test_release(args)

    sit_repos = os.path.join(conda_prefix, 'data', 'anarelinfo')
    if not os.path.exists(sit_repos):
        warning("the directory %s doesn't exist, no base release dependency information will be available\n" % sit_repos)
    else:
        newenv['SIT_REPOS']=sit_repos

    sit_release_fname, jnk = get_test_release_files(args)
    sit_release = open(sit_release_fname,'r').read().strip()
    newenv['SIT_ARCH']=sit_arch
    newenv['SIT_RELEASE']=sit_release
    newenv['SIT_USE_CONDA']='1'
# the source activate should set the conda_env_path
#    newenv['CONDA_ENV_PATH'] = conda_prefix
    newenv['SIT_DATA'] = os.path.pathsep.join([os.path.join(test_release_root_dir,'data'),
                                               os.path.join(conda_prefix, 'data'),
                                               os.path.join(args.sitroot,'data')])

def add_to_condaenv(args, newenv):
    if is_conda_test_release_dir(args):
        conda_bin, conda_env = get_conda_bin_and_env_from_test_release(args)
        info("detected conda release directory.")
        if args.env or args.py3 or args.gpu or args.dev or args.conda:
            warning("detected conda release, explicitly setting env to activate to %s, ignoring command line options" % conda_env)
        args.env = conda_env
    else:
        conda_bin = get_conda_bin_for(args)

    paths = newenv['PATH'].split(os.path.pathsep)
    if not os.path.exists(args.manage):
        fatal("The manage directory, where conda_setup, condarel are, cannot be found. specified is %s, use --manage to override" % args.manage)
    if args.manage not in paths:
        paths.insert(0, args.manage)
    paths.insert(0, conda_bin)
    newenv['PATH'] = os.path.pathsep.join(paths)
    newenv['SIT_ROOT'] = args.sitroot

    # for psvn
    newenv['SIT_SVN']='https://pswww.slac.stanford.edu/svn/psdmrepo'
    newenv['SIT_SVN_USER']='https://pswww.slac.stanford.edu/svn/userrepo'


    if is_conda_test_release_dir(args):
        update_newenv_for_test_release(args, newenv)
                     

DESCR='''
Modifies environment for conda. Undoes results of sit_setup, if it was run.
If run from a conda release directory or the --reldir argument is given to
specify a release directory, (created with the condarel tool), activates the 
conda environment specified in that test release. Otherwise, defaults to activate the 
current python 2.7 ana environment in the production miniconda installation for this
platform (rhel5/rhel6 or rhel7 - usually rhel7). 

Options allow one to specify a specific installation and environment.  
For examples, the development rhel7 installation with the current python 3 
environment -- however, it is safest to let the script determine the correct OS - i.e, 
rhel7, rhel6 or rhel5.  This script - conda_setup_details - is not meant to be
run directly. It is used from the script conda_setup, that is sourced to change the
environment.
'''

if __name__ == '__main__':
    def_sit_root='/reg/g/psdm'
    def_inst = '/reg/g/psdm/sw/conda/inst'
    def_current = '/reg/g/psdm/sw/conda/current'
    def_manage_bin = '/reg/g/psdm/sw/conda/manage/bin'
    def_test_release_prompt = '*tr*'
    osName, _ = getOsAndPlatform()
    def_rhel5 = False
    def_rhel6 = False
    def_rhel7 = False
    if osName == 'rhel5': def_rhel5 = True 
    if osName == 'rhel6': def_rhel6 = True 
    if osName == 'rhel7': def_rhel7 = True 

    parser = argparse.ArgumentParser(description=DESCR)
    parser.add_argument('-v','--verbose',action='store_true', help='verbose messages')
    parser.add_argument('-q', '--quiet', action='store_true', help='quiet, no output (except fatal errors)')
    parser.add_argument('--noenv', action='store_true', help='do not activate a conda environment')
    parser.add_argument('--dev', action='store_true', help="use development miniconda installation, not production")
    parser.add_argument('--dm', action='store_true', help="activate latest data management environment", default=False)
    parser.add_argument('--rhel5', action='store_true', help="use rhel5 miniconda installation. def=%s"%def_rhel5)
    parser.add_argument('--rhel6', action='store_true', help="use rhel6 miniconda installation. def=%s"%def_rhel6)
    parser.add_argument('--rhel7', action='store_true', help="use rhel7 miniconda installation. def=%s"%def_rhel7)
    parser.add_argument('--instdir', type=str, help="overrides default directory for conda installations", default=def_inst)
    parser.add_argument('--current', type=str, help="overrides default directory for current (has ana and dm subdirs)", default=def_current)
    parser.add_argument('--conda', type=str, help="non standard path to conda installation (prefix with bin subdir)", default=None)
    parser.add_argument('--sitroot', type=str, help="set SIT_ROOT, default is %s" % def_sit_root, default=def_sit_root)
    parser.add_argument('--manage', type=str, help="non standard path to manage/bin default is %s" % def_manage_bin, default=def_manage_bin)
    parser.add_argument('--env', type=str, help='explicitly name an environment to activate')
    parser.add_argument('--reldir', type=str, help='explicitly specify path to a conda test release directory to activate')
    parser.add_argument('--prompt', type=str, help='prompt string for test release (pass none to turn off), default=%s' % def_test_release_prompt, default=def_test_release_prompt)
    parser.add_argument('--py3', action='store_true', help='activate current python 3 environment')
    parser.add_argument('--gpu', action='store_true', help='activate current gpu environment (do with --dev)')
    parser.add_argument('--file', type=str, help='output file [ignore this option, implementation detail]')
    args = parser.parse_args()

    if None == args.file: fatal("must provide the --file with an output file to write environment modifications to.") 

    if args.gpu and (not args.dev): fatal("--gpu must be accompanied by --dev")
    if args.py3 and args.gpu: fatal("cannot specify both --py3 and --gpu")

    if args.rhel5 + args.rhel6 + args.rhel7 > 1:
        fatal("specify none, or just one, of --rhel5 --rhel6 --rhel7")
    
    if args.env and args.noenv:
        fatal("an environment is names with --env, but the --noenv flag is given as well")

    if args.rhel5 + args.rhel6 + args.rhel7 == 0:
        if def_rhel7: args.rhel7=def_rhel7
        elif def_rhel6: args.rhel6=def_rhel6
        elif def_rhel5: args.rhel5=def_rhel5
    if args.rhel5 + args.rhel6 + args.rhel7 != 1:
        fatal("internal error: could not determine which of rhel5/rhel6/rhel7 this is")
    
    VERBOSE=args.verbose
    QUIET=args.quiet
    oldenv, newenv = undo_sit_setup()
    # oldenv has current PATH, LD_LIBRARY_PATH,  PYTHONPATH, and any SIT_* evars
    # releated to rpm installation
    # newenv has stripped out references to sit_setup, values for PATH, LD_LIBRARY_PATH
    # PYTHONPATH, and all SIT_ vars. Value can be '' for striped out evar.

    add_to_condaenv(args, newenv)
    # typicaly, updates newenv as follows:
    #    adds /reg/g/psdm/sw/conda/manage/bin to front of path
    #    next adds conda/bin subdir to front of PATH
    #    and SIT_ROOT
    # non-typical, if this is a releasee dir
    #    sets PYTHONPATH, LD_LIBRARY_PATH
    #    a few SIT variables for the test release

    set_conda_setup_active(newenv)
    # adds flag to new environment to say that this script is active

    save_other_env(oldenv)  
    # saves PS1, can save anyother environment variabls we think we need to restore

    write_env_file(args, oldenv, newenv)
    # writes the file to source for environment change. The file first 
    # unsets or sets all the variables in newenv, PATH, PYTHONPATH, LD_LIBRARY_PATH, SIT_*
    # then it writes the undo_conda function.
    #   this does 
    #       source deactivate to get out of any conda environment,
    #       unset everything in newenv
    #       sets, or unsets variables in oldenv (unsets if they were empty initially)
    #       deletes itself at the end
    # then it adds the source activate for a conda_env (unless --noenv given)
    # if a release directory
    #    it adds the release bin to the front of path
    #    it reexports a few SIT variables that might have been overwritten by the environment setup
